{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "04836ccf-43cf-4bc1-8d69-1e939cb2eaac",
   "metadata": {},
   "source": [
    "Q1. What is Min-Max scaling, and how is it used in data preprocessing? Provide an example to illustrate its application.  \n",
    "\n",
    "Min-Max Scaling\n",
    "\n",
    "Min-Max Scaling is a data preprocessing technique used to normalize the range of independent variables or features of data. It transforms the data to fit within a specific range, typically [0, 1]. This scaling method is particularly useful when the features have different ranges and you want to bring them to a common scale without distorting differences in the ranges of values.\n",
    "\n",
    "Formula\n",
    "\n",
    "The formula for Min-Max scaling is:\n",
    "\n",
    "xscaled = (x−xmin)/(xmax−xmin)\n",
    "\n",
    "where:\n",
    "\n",
    "( x ) is the original value\n",
    "\n",
    "( x_{\\text{min}} ) is the minimum value of the feature\n",
    "\n",
    "( x_{\\text{max}} ) is the maximum value of the feature\n",
    "\n",
    "( x_{\\text{scaled}} ) is the scaled value\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f81d7718-7e99-4ff4-8cd8-0d7142fac9f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Data:\n",
      " [[1 2]\n",
      " [2 3]\n",
      " [3 4]\n",
      " [4 5]\n",
      " [5 6]]\n",
      "Scaled Data:\n",
      " [[0.   0.  ]\n",
      " [0.25 0.25]\n",
      " [0.5  0.5 ]\n",
      " [0.75 0.75]\n",
      " [1.   1.  ]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "# Sample data\n",
    "data = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]])\n",
    "\n",
    "# Initialize the MinMaxScaler\n",
    "scaler = MinMaxScaler()\n",
    "\n",
    "# Fit and transform the data\n",
    "scaled_data = scaler.fit_transform(data)\n",
    "\n",
    "print(\"Original Data:\\n\", data)\n",
    "print(\"Scaled Data:\\n\", scaled_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13d29a17-9d2e-47bd-9ac3-ee1a331e9621",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "29a444b0-1f77-4719-a8e4-13c7e14b32d7",
   "metadata": {},
   "source": [
    "Q2. What is the Unit Vector technique in feature scaling, and how does it differ from Min-Max scaling? Provide an example to illustrate its application.  \n",
    "\n",
    "\n",
    "Unit Vector Technique in Feature Scaling\n",
    "\n",
    "The Unit Vector technique, also known as Normalization, scales the values of a feature to have a unit norm (i.e., the length of the vector is 1). This technique is particularly useful when you want to ensure that the magnitude of the feature vector does not affect the results of machine learning algorithms that rely on distance metrics, such as k-nearest neighbors or clustering algorithms.\n",
    "\n",
    "Formula\n",
    "The formula for Unit Vector scaling is:\n",
    "\n",
    "xnormalized = x/∥x∥\n",
    "where:\n",
    "\n",
    "( x ) is the original feature vector\n",
    "( |x| ) is the norm (length) of the vector, typically the Euclidean norm\n",
    "\n",
    "Difference from Min-Max Scaling\n",
    "\n",
    "Min-Max Scaling: Transforms the data to fit within a specific range, typically [0, 1]. It preserves the relationships between the original data values but changes the scale.\n",
    "\n",
    "Unit Vector Scaling: Transforms the data to have a unit norm, ensuring that the magnitude of the feature vector is 1. It is more focused on the direction of the data points rather than their absolute values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9a58d273-b1b4-44e5-a9cb-5ca1c6958c14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Data:\n",
      " [[4 1]\n",
      " [1 3]\n",
      " [2 2]\n",
      " [3 5]]\n",
      "Normalized Data:\n",
      " [[0.9701425  0.24253563]\n",
      " [0.31622777 0.9486833 ]\n",
      " [0.70710678 0.70710678]\n",
      " [0.51449576 0.85749293]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.preprocessing import Normalizer\n",
    "\n",
    "# Sample data\n",
    "data = np.array([[4, 1], [1, 3], [2, 2], [3, 5]])\n",
    "\n",
    "# Initialize the Normalizer\n",
    "normalizer = Normalizer()\n",
    "\n",
    "# Fit and transform the data\n",
    "normalized_data = normalizer.fit_transform(data)\n",
    "\n",
    "print(\"Original Data:\\n\", data)\n",
    "print(\"Normalized Data:\\n\", normalized_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2ba36dd-944f-498c-b1f2-1451447219a5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "b1099d27-7c31-477a-92e1-c4929d75afd3",
   "metadata": {},
   "source": [
    "Q3. What is PCA (Principle Component Analysis), and how is it used in dimensionality reduction? Provide an example to illustrate its application.  \n",
    "\n",
    "Principal Component Analysis (PCA)\n",
    "\n",
    "Principal Component Analysis (PCA) is a statistical technique used for dimensionality reduction. It transforms a dataset with many features into a new dataset with fewer features, while retaining as much of the original information as possible. PCA achieves this by identifying the directions (principal components) along which the variance in the data is maximized.\n",
    "\n",
    "How PCA Works\n",
    "\n",
    "Standardize the Data: Ensure that each feature has a mean of 0 and a standard deviation of 1.\n",
    "\n",
    "Compute the Covariance Matrix: This matrix captures the relationships between the features.\n",
    "\n",
    "Calculate the Eigenvalues and Eigenvectors: These are derived from the covariance matrix. The eigenvectors represent the directions of maximum variance (principal components), and the eigenvalues represent the magnitude of the variance in these directions.\n",
    "\n",
    "Sort the Eigenvalues and Eigenvectors: Sort them in descending order of eigenvalues.\n",
    "\n",
    "Select Principal Components: Choose the top k eigenvectors corresponding to the largest eigenvalues to form a new feature space.\n",
    "Transform the Data: Project the original data onto the new feature space.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7085e8c0-9b64-4c94-80f8-143b41ab7796",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Sample data\n",
    "data = np.array([[2.5, 2.4],\n",
    "                 [0.5, 0.7],\n",
    "                 [2.2, 2.9],\n",
    "                 [1.9, 2.2],\n",
    "                 [3.1, 3.0],\n",
    "                 [2.3, 2.7],\n",
    "                 [2, 1.6],\n",
    "                 [1, 1.1],\n",
    "                 [1.5, 1.6],\n",
    "                 [1.1, 0.9]])\n",
    "\n",
    "# Standardize the data\n",
    "scaler = StandardScaler()\n",
    "data_standardized = scaler.fit_transform(data)\n",
    "\n",
    "# Apply PCA\n",
    "pca = PCA(n_components=2)\n",
    "principal_components = pca.fit_transform(data_standardized)\n",
    "\n",
    "# Plot the results\n",
    "plt.scatter(principal_components[:, 0], principal_components[:, 1])\n",
    "plt.xlabel('Principal Component 1')\n",
    "plt.ylabel('Principal Component 2')\n",
    "plt.title('PCA of Sample Data')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a4940bb-af85-49d0-86b8-587051c6f1a1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "40ba9a61-2f47-4f7d-b90b-0c9c866a4629",
   "metadata": {},
   "source": [
    "Q4. What is the relationship between PCA and Feature Extraction, and how can PCA be used for Feature Extraction? Provide an example to illustrate this concept.  \n",
    "\n",
    "Relationship Between PCA and Feature Extraction\n",
    "\n",
    "Principal Component Analysis (PCA) is a powerful technique used for feature extraction and dimensionality reduction. Feature extraction involves transforming the original features into a new set of features that capture the most important information in the data. PCA achieves this by identifying the directions (principal components) along which the variance in the data is maximized.\n",
    "\n",
    "How PCA is Used for Feature Extraction\n",
    "\n",
    "Identify Principal Components: PCA identifies the principal components, which are the directions of maximum variance in the data. These components are linear combinations of the original features.\n",
    "\n",
    "Transform Data: The original data is projected onto the principal components, resulting in a new set of features (principal components) that capture the most significant patterns in the data.\n",
    "\n",
    "Reduce Dimensionality: By selecting a subset of the principal components, PCA reduces the dimensionality of the data while retaining most of the original information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "26a66507-38e8-4800-b851-20e6401ed654",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Sample data\n",
    "data = np.array([[2.5, 2.4],\n",
    "                 [0.5, 0.7],\n",
    "                 [2.2, 2.9],\n",
    "                 [1.9, 2.2],\n",
    "                 [3.1, 3.0],\n",
    "                 [2.3, 2.7],\n",
    "                 [2, 1.6],\n",
    "                 [1, 1.1],\n",
    "                 [1.5, 1.6],\n",
    "                 [1.1, 0.9]])\n",
    "\n",
    "# Standardize the data\n",
    "scaler = StandardScaler()\n",
    "data_standardized = scaler.fit_transform(data)\n",
    "\n",
    "# Apply PCA\n",
    "pca = PCA(n_components=2)\n",
    "principal_components = pca.fit_transform(data_standardized)\n",
    "\n",
    "# Plot the results\n",
    "plt.scatter(principal_components[:, 0], principal_components[:, 1])\n",
    "plt.xlabel('Principal Component 1')\n",
    "plt.ylabel('Principal Component 2')\n",
    "plt.title('PCA for Feature Extraction')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a20bac40-64e7-4bbe-8818-d813ba6aefbc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9831c0df-2965-4d4c-b0e2-b81f92cf7aac",
   "metadata": {},
   "source": [
    "Q5. You are working on a project to build a recommendation system for a food delivery service. The dataset contains features such as price, rating, and delivery time. Explain how you would use Min-Max scaling to preprocess the data.  \n",
    "\n",
    "Steps to Apply Min-Max Scaling\n",
    "\n",
    "\n",
    "Understand the Data: Identify the features that need scaling. In this case, the features are price, rating, and delivery time.\n",
    "\n",
    "\n",
    "Calculate Min and Max Values: For each feature, calculate the minimum and maximum values. These values will be used to scale the data.\n",
    "\n",
    "\n",
    "Apply Min-Max Scaling: Use the Min-Max scaling formula to transform the data:\n",
    "\n",
    "xscaled =  (x−xmin)/(xmax−xmin)\n",
    "\n",
    "This will scale each feature to a range [0, 1].\n",
    "\n",
    "\n",
    "Integrate Scaled Data: Replace the original feature values with the scaled values in your dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "31d9a7d6-b422-4493-b4e8-365f67ad45ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Data:\n",
      "    price  rating  delivery_time\n",
      "0     10       3             30\n",
      "1     20       4             20\n",
      "2     30       2             40\n",
      "3     40       5             10\n",
      "4     50       1             50\n",
      "Scaled Data:\n",
      "    price  rating  delivery_time\n",
      "0   0.00    0.50           0.50\n",
      "1   0.25    0.75           0.25\n",
      "2   0.50    0.25           0.75\n",
      "3   0.75    1.00           0.00\n",
      "4   1.00    0.00           1.00\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "# Sample data\n",
    "data = {\n",
    "    'price': [10, 20, 30, 40, 50],\n",
    "    'rating': [3, 4, 2, 5, 1],\n",
    "    'delivery_time': [30, 20, 40, 10, 50]\n",
    "}\n",
    "\n",
    "# Create a DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Initialize the MinMaxScaler\n",
    "scaler = MinMaxScaler()\n",
    "\n",
    "# Fit and transform the data\n",
    "scaled_data = scaler.fit_transform(df)\n",
    "\n",
    "# Create a DataFrame with the scaled data\n",
    "scaled_df = pd.DataFrame(scaled_data, columns=df.columns)\n",
    "\n",
    "print(\"Original Data:\\n\", df)\n",
    "print(\"Scaled Data:\\n\", scaled_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbee77ca-21dd-4475-9c0d-716240b06918",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "1d3f2753-15c3-4cea-9239-2f3687b60477",
   "metadata": {},
   "source": [
    "Q6. You are working on a project to build a model to predict stock prices. The dataset contains many features, such as company financial data and market trends. Explain how you would use PCA to reduce the dimensionality of the dataset.  \n",
    "\n",
    "\n",
    "Using PCA for Dimensionality Reduction in Stock Price Prediction\n",
    "\n",
    "Principal Component Analysis (PCA) is an effective technique for reducing the dimensionality of a dataset while retaining most of the original information. Here’s how you can use PCA to preprocess your dataset for predicting stock prices:\n",
    "\n",
    "Steps to Apply PCA\n",
    "\n",
    "Standardize the Data: Ensure that each feature has a mean of 0 and a standard deviation of 1. This step is crucial because PCA is sensitive to the variances of the features.\n",
    "\n",
    "Compute the Covariance Matrix: Calculate the covariance matrix to understand how the features vary with respect to each other.\n",
    "\n",
    "Calculate Eigenvalues and Eigenvectors: Determine the eigenvalues and eigenvectors of the covariance matrix. The eigenvectors represent the directions of maximum variance (principal components), and the eigenvalues represent the magnitude of the variance in these directions.\n",
    "\n",
    "Sort Eigenvalues and Eigenvectors: Sort them in descending order of eigenvalues. The eigenvectors corresponding to the largest eigenvalues are the principal components that capture the most variance.\n",
    "\n",
    "Select Principal Components: Choose the top k eigenvectors to form a new feature space. The number of principal components (k) can be chosen based on the explained variance ratio, ensuring that a significant portion of the variance is retained.\n",
    "\n",
    "Transform the Data: Project the original data onto the new feature space defined by the selected principal components.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c6f033b0-52d2-42cc-b2df-095298bfd67b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Data:\n",
      "    feature1  feature2  feature3  feature4  feature5\n",
      "0  0.856307  0.392157  0.384284  0.170413  0.241276\n",
      "1  0.504239  0.030023  0.446902  0.688451  0.620696\n",
      "2  0.538441  0.045593  0.359702  0.065627  0.042466\n",
      "3  0.040307  0.821319  0.510268  0.881205  0.668523\n",
      "4  0.924966  0.416776  0.398033  0.312746  0.138144\n",
      "Principal Components:\n",
      "         PC1       PC2\n",
      "0  1.503362 -1.239176\n",
      "1  0.698446  1.405092\n",
      "2  2.032914 -0.670945\n",
      "3 -1.639512  1.109022\n",
      "4  1.468555 -1.315782\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "# Sample data (replace with your actual dataset)\n",
    "data = pd.DataFrame({\n",
    "    'feature1': np.random.rand(100),\n",
    "    'feature2': np.random.rand(100),\n",
    "    'feature3': np.random.rand(100),\n",
    "    'feature4': np.random.rand(100),\n",
    "    'feature5': np.random.rand(100)\n",
    "})\n",
    "\n",
    "# Standardize the data\n",
    "scaler = StandardScaler()\n",
    "data_standardized = scaler.fit_transform(data)\n",
    "\n",
    "# Apply PCA\n",
    "pca = PCA(n_components=2)  # Adjust n_components based on the desired explained variance\n",
    "principal_components = pca.fit_transform(data_standardized)\n",
    "\n",
    "# Create a DataFrame with the principal components\n",
    "principal_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])\n",
    "\n",
    "print(\"Original Data:\\n\", data.head())\n",
    "print(\"Principal Components:\\n\", principal_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9cfa641a-be1b-4358-8c72-74090a8aa0f2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cdf570ab-b816-40c6-831e-774c9249c1d7",
   "metadata": {},
   "source": [
    "Q7. For a dataset containing the following values: [1, 5, 10, 15, 20], perform Min-Max scaling to transform the values to a range of -1 to 1.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "67534766-f1da-44b9-869e-42d6f4acd0b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Data:\n",
      " [ 1  5 10 15 20]\n",
      "Scaled Data:\n",
      " [-1.         -0.57894737 -0.05263158  0.47368421  1.        ]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "# Original data\n",
    "data = np.array([1, 5, 10, 15, 20]).reshape(-1, 1)\n",
    "\n",
    "# Initialize the MinMaxScaler with the desired range\n",
    "scaler = MinMaxScaler(feature_range=(-1, 1))\n",
    "\n",
    "# Fit and transform the data\n",
    "scaled_data = scaler.fit_transform(data)\n",
    "\n",
    "print(\"Original Data:\\n\", data.flatten())\n",
    "print(\"Scaled Data:\\n\", scaled_data.flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86fe6e64-b5ac-409c-953f-b67a7ed3961d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e34c1682-2266-425d-9ecc-e794d7d9b3a4",
   "metadata": {},
   "source": [
    "Q8. For a dataset containing the following features: [height, weight, age, gender, blood pressure], perform Feature Extraction using PCA. How many principal components would you choose to retain, and why? \n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
